diff --git a/.gitignore b/.gitignore
index 4b81ea7..34dc6b9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -38,3 +38,4 @@ transfuzz
 qcn
 .dirstamp
 eet
+.vscode
diff --git a/configure.ac b/configure.ac
index bc6d606..1ff8373 100644
--- a/configure.ac
+++ b/configure.ac
@@ -4,7 +4,7 @@ AC_LANG(C++)
 AM_INIT_AUTOMAKE(-Wall -Werror foreign)
 AC_PROG_CXX
 AC_PROG_RANLIB
-AX_CXX_COMPILE_STDCXX_11(noext,mandatory)
+AX_CXX_COMPILE_STDCXX_17(noext,mandatory)
 
 AX_LIB_POSTGRESQL()
 PKG_CHECK_MODULES(LIBPQXX, libpqxx >= 4.0)
diff --git a/dbms_info.cc b/dbms_info.cc
index 06e240e..03be227 100644
--- a/dbms_info.cc
+++ b/dbms_info.cc
@@ -1,7 +1,7 @@
 #include "dbms_info.hh"
 
 dbms_info::dbms_info(map<string,string>& options)
-{    
+{
     if (false) {}
     #ifdef HAVE_LIBSQLITE3
     else if (options.count("sqlite")) {
@@ -10,7 +10,7 @@ dbms_info::dbms_info(map<string,string>& options)
         test_db = options["sqlite"];
         can_trigger_error_in_txn = true;
     }
-    #endif 
+    #endif
 
     #ifdef HAVE_LIBMYSQLCLIENT
     else if (options.count("tidb-db") && options.count("tidb-port")) {
@@ -32,21 +32,22 @@ dbms_info::dbms_info(map<string,string>& options)
         host_addr = options["oceanbase-host"];
         can_trigger_error_in_txn = true;
     }
-    #endif 
+    #endif
 
     else if (options.count("clickhouse-db") && options.count("clickhouse-port")) {
         dbms_name = "clickhouse";
         test_port = stoi(options["clickhouse-port"]);
         test_db = options["clickhouse-db"];
         can_trigger_error_in_txn = false;
-    } 
+    }
     else if (options.count("postgres-db") && options.count("postgres-port")) {
         dbms_name = "postgres";
         test_port = stoi(options["postgres-port"]);
         test_db = options["postgres-db"];
+        inst_path = options.count("postgres-path") ? options["postgres-path"] : "/usr/local/pgsql";
         can_trigger_error_in_txn = false;
     }
-    else if (options.count("yugabyte-db") && 
+    else if (options.count("yugabyte-db") &&
                     options.count("yugabyte-port") &&
                     options.count("yugabyte-host")) {
         dbms_name = "yugabyte";
@@ -55,7 +56,7 @@ dbms_info::dbms_info(map<string,string>& options)
         host_addr = options["yugabyte-host"];
         can_trigger_error_in_txn = false;
     }
-    else if (options.count("cockroach-db") && 
+    else if (options.count("cockroach-db") &&
                     options.count("cockroach-port") &&
                     options.count("cockroach-host")) {
         dbms_name = "cockroach";
@@ -69,9 +70,9 @@ dbms_info::dbms_info(map<string,string>& options)
         throw runtime_error("Does not define target dbms and db in dbms_info::dbms_info()");
     }
 
-    if (options.count("output-or-affect-num")) 
+    if (options.count("output-or-affect-num"))
         ouput_or_affect_num = stoi(options["output-or-affect-num"]);
-    else 
+    else
         ouput_or_affect_num = 0;
 
     return;
diff --git a/dbms_info.hh b/dbms_info.hh
index 99a7a99..da71ed0 100644
--- a/dbms_info.hh
+++ b/dbms_info.hh
@@ -11,6 +11,7 @@ using namespace std;
 struct dbms_info {
     string dbms_name;
     string test_db;
+    string inst_path;
     int test_port;
     int ouput_or_affect_num;
     bool can_trigger_error_in_txn;
@@ -20,6 +21,7 @@ struct dbms_info {
     dbms_info() {
         dbms_name = "";
         test_db = "";
+        inst_path = "";
         test_port = 0;
         ouput_or_affect_num = 0;
         can_trigger_error_in_txn = false;
diff --git a/general_process.cc b/general_process.cc
index 0413a9b..eaec840 100644
--- a/general_process.cc
+++ b/general_process.cc
@@ -31,21 +31,21 @@ shared_ptr<schema> get_schema(dbms_info& d_info)
     try {
         if (false) {}
         #ifdef HAVE_LIBSQLITE3
-        else if (d_info.dbms_name == "sqlite") 
+        else if (d_info.dbms_name == "sqlite")
             schema = make_shared<schema_sqlite>(d_info.test_db, true);
         #endif
 
         #ifdef HAVE_LIBMYSQLCLIENT
-        else if (d_info.dbms_name == "mysql") 
+        else if (d_info.dbms_name == "mysql")
             schema = make_shared<schema_mysql>(d_info.test_db, d_info.test_port);
-        else if (d_info.dbms_name == "oceanbase") 
+        else if (d_info.dbms_name == "oceanbase")
             schema = make_shared<schema_ob>(d_info.test_db, d_info.test_port, d_info.host_addr);
-        else if (d_info.dbms_name == "tidb") 
+        else if (d_info.dbms_name == "tidb")
             schema = make_shared<schema_tidb>(d_info.test_db, d_info.test_port);
         #endif
-        
+
         else if (d_info.dbms_name == "postgres")
-            schema = make_shared<schema_pqxx>(d_info.test_db, d_info.test_port, true);
+            schema = make_shared<schema_pqxx>(d_info.test_db, d_info.test_port, d_info.inst_path, true);
         else if (d_info.dbms_name == "clickhouse")
             schema = make_shared<schema_clickhouse>(d_info.test_db, d_info.test_port);
         else if (d_info.dbms_name == "yugabyte")
@@ -60,7 +60,6 @@ shared_ptr<schema> get_schema(dbms_info& d_info)
 
     } catch (exception &e) { // may occur occastional error
         dbms_execution_ms = dbms_execution_ms + (get_cur_time_ms() - schema_start);
-        
         string err = e.what();
         bool expected = (err.find("expected error") != string::npos) || (err.find("timeout") != string::npos);
         if (!expected) {
@@ -101,7 +100,7 @@ shared_ptr<dut_base> dut_setup(dbms_info& d_info)
     else if (d_info.dbms_name == "clickhouse")
         dut = make_shared<dut_clickhouse>(d_info.test_db, d_info.test_port, DB_RECORD_FILE);
     else if (d_info.dbms_name == "postgres")
-        dut = make_shared<dut_libpq>(d_info.test_db, d_info.test_port);
+        dut = make_shared<dut_libpq>(d_info.test_db, d_info.test_port, d_info.inst_path);
     else if (d_info.dbms_name == "yugabyte")
         dut = make_shared<dut_yugabyte>(d_info.test_db, d_info.test_port, d_info.host_addr);
     else if (d_info.dbms_name == "cockroach")
@@ -172,7 +171,7 @@ pid_t fork_db_server(dbms_info& d_info)
     else if (d_info.dbms_name == "sqlite")
         fork_pid = 0;
     #endif
-    
+
     #ifdef HAVE_LIBMYSQLCLIENT
     else if (d_info.dbms_name == "mysql")
         fork_pid = dut_mysql::fork_db_server();
@@ -203,13 +202,13 @@ pid_t fork_db_server(dbms_info& d_info)
     return fork_pid;
 }
 
-void user_signal(int signal)  
-{  
-    if(signal != SIGUSR1) {  
-        printf("unexpect signal %d\n", signal);  
-        exit(1);  
-    }  
-     
+void user_signal(int signal)
+{
+    if(signal != SIGUSR1) {
+        printf("unexpect signal %d\n", signal);
+        exit(1);
+    }
+
     cerr << "get SIGUSR1, stop the thread" << endl;
     pthread_exit(0);
 }
@@ -246,28 +245,28 @@ void dut_reset_to_backup(dbms_info& d_info)
     dut->reset_to_backup();
 }
 
-void dut_get_content(dbms_info& d_info, 
+void dut_get_content(dbms_info& d_info,
                     map<string, vector<vector<string>>>& content)
 {
     vector<string> table_names;
     auto schema = get_schema(d_info);
     for (auto& table:schema->tables)
         table_names.push_back(table.ident());
-    
+
     content.clear();
     auto dut = dut_setup(d_info);
     dut->get_content(table_names, content);
 }
 
-void interect_test(dbms_info& d_info, 
-                    shared_ptr<prod> (* tmp_statement_factory)(scope *), 
+void interect_test(dbms_info& d_info,
+                    shared_ptr<prod> (* tmp_statement_factory)(scope *),
                     bool need_affect,
                     string record_file)
 {
     auto schema = get_schema(d_info);
     scope scope;
     schema->fill_scope(scope);
-    
+
     shared_ptr<prod> gen = tmp_statement_factory(&scope);
     ostringstream s;
     gen->out(s);
@@ -276,13 +275,13 @@ void interect_test(dbms_info& d_info,
     static int try_time = 0;
     auto test_start = get_cur_time_ms();
     try {
-        auto dut = dut_setup(d_info);    
+        auto dut = dut_setup(d_info);
         int affect_num = 0;
         dut->test(sql, NULL, &affect_num);
-        
+
         if (need_affect && affect_num <= 0)
             throw runtime_error(string("expected error: affect result empty"));
-        
+
         ofstream ofile(record_file, ios::app);
         ofile << sql << endl;
         ofile.close();
@@ -290,7 +289,7 @@ void interect_test(dbms_info& d_info,
 
     } catch(std::exception &e) { // ignore runtime error
         dbms_execution_ms = dbms_execution_ms + (get_cur_time_ms() - test_start);
-        
+
         string err = e.what();
         cerr << "err: " << e.what() << endl;
         bool expected = (err.find("expected error") != string::npos) || (err.find("timeout") != string::npos);
@@ -311,9 +310,9 @@ void interect_test(dbms_info& d_info,
     }
 }
 
-void normal_test(dbms_info& d_info, 
-                    shared_ptr<schema>& schema, 
-                    shared_ptr<prod> (* tmp_statement_factory)(scope *), 
+void normal_test(dbms_info& d_info,
+                    shared_ptr<schema>& schema,
+                    shared_ptr<prod> (* tmp_statement_factory)(scope *),
                     bool need_affect,
                     string record_file)
 {
@@ -331,10 +330,10 @@ void normal_test(dbms_info& d_info,
         auto dut = dut_setup(d_info);
         int affect_num = 0;
         dut->test(sql, NULL, &affect_num);
-        
+
         if (need_affect && affect_num <= 0)
             throw runtime_error(string("expected error: affect result empty"));
-        
+
         ofstream ofile(record_file, ios::app);
         ofile << sql << endl;
         ofile.close();
@@ -363,12 +362,12 @@ void normal_test(dbms_info& d_info,
     }
 }
 
-static size_t BKDRHash(const char *str, size_t hash)  
+static size_t BKDRHash(const char *str, size_t hash)
 {
-    while (size_t ch = (size_t)*str++)  {         
-        hash = hash * 131 + ch;   // 也可以乘以31、131、1313、13131、131313..  
-    }  
-    return hash;  
+    while (size_t ch = (size_t)*str++)  {
+        hash = hash * 131 + ch;   // 也可以乘以31、131、1313、13131、131313..
+    }
+    return hash;
 }
 
 static void hash_output_to_set(vector<vector<string>> &output, vector<size_t>& hash_set)
@@ -408,34 +407,34 @@ static void output_diff(string item_name, vector<vector<string>>& a_result, vect
 }
 
 static bool is_number(const string &s) {
-    if (s.empty() || s.length() <= 0) 
+    if (s.empty() || s.length() <= 0)
         return false;
 
     int point = 0;
-    if (s.length() == 1 && (s[0] >'9' || s[0] < '0')) 
+    if (s.length() == 1 && (s[0] >'9' || s[0] < '0'))
         return false;
 
     if(s.length() > 1) {
-        if (s[0]!='.' && (s[0] >'9' || s[0] < '0')&&s[0]!='-' && s[0]!='+') 
+        if (s[0]!='.' && (s[0] >'9' || s[0] < '0')&&s[0]!='-' && s[0]!='+')
             return false;
-        
-        if (s[0] == '.') 
+
+        if (s[0] == '.')
             ++point;
 
-        if ((s[0] == '+' || s[0] == '-') && (s[1] >'9' || s[1] < '0')) 
+        if ((s[0] == '+' || s[0] == '-') && (s[1] >'9' || s[1] < '0'))
             return false;
 
         for (size_t i = 1; i < s.length(); ++i) {
-            if (s[i]!='.' && (s[i] >'9' || s[i] < '0')) 
+            if (s[i]!='.' && (s[i] >'9' || s[i] < '0'))
                 return false;
 
-            if (s[i] == '.') 
+            if (s[i] == '.')
                 ++point;
         }
     }
 
     if (point > 1) return false;
-    
+
     return true;
 }
 
@@ -448,7 +447,7 @@ static bool nomoalize_content(vector<vector<string>> &content)
         for (int j = 0; j < column_num; j++) {
             auto str = content[i][j];
             double value = 0;
-            
+
             if (!is_number(str) || str.find(".") == string::npos)
                 continue;
 
@@ -461,18 +460,18 @@ static bool nomoalize_content(vector<vector<string>> &content)
     return true;
 }
 
-bool compare_content(map<string, vector<vector<string>>>&a_content, 
+bool compare_content(map<string, vector<vector<string>>>&a_content,
                      map<string, vector<vector<string>>>&b_content)
 {
     if (a_content.size() != b_content.size()) {
         cerr << "size not equal: " << a_content.size() << " " << b_content.size() << endl;
         return false;
     }
-    
+
     for (auto iter = a_content.begin(); iter != a_content.begin(); iter++) {
         auto& table = iter->first;
         auto& con_table_content = iter->second;
-        
+
         if (b_content.count(table) == 0) {
             cerr << "b_content does not have " << table << endl;
             return false;
@@ -518,10 +517,10 @@ bool compare_output(vector<vector<vector<string>>>& a_output,
     for (auto i = 0; i < size; i++) { // for each stmt
         auto& a_stmt_output = a_output[i];
         auto& b_stmt_output = b_output[i];
-    
+
         nomoalize_content(a_stmt_output);
         nomoalize_content(b_stmt_output);
-        
+
         vector<size_t> a_hash_set, b_hash_set;
         hash_output_to_set(a_stmt_output, a_hash_set);
         hash_output_to_set(b_stmt_output, b_hash_set);
@@ -546,20 +545,20 @@ bool compare_output(vector<vector<vector<string>>>& a_output,
 }
 
 int generate_database(dbms_info& d_info)
-{ 
+{
     if (remove(DB_RECORD_FILE) != 0) {
         cerr << "generate_database: cannot remove file (" << DB_RECORD_FILE << ")" << endl;
     }
-    
+
     dut_reset(d_info);
 
     auto ddl_stmt_num = d6() + 3; // at least 3 statements to create 3 tables
     for (auto i = 0; i < ddl_stmt_num; i++)
-        interect_test(d_info, &ddl_statement_factory, false, DB_RECORD_FILE); // has disabled the not null, check and unique clause 
-    
+        interect_test(d_info, &ddl_statement_factory, false, DB_RECORD_FILE); // has disabled the not null, check and unique clause
+
     auto basic_dml_stmt_num = 80 + d42(); // 80 - 122 inserted items
     auto schema = get_schema(d_info); // schema will not change in this stage
-    for (auto i = 0; i < basic_dml_stmt_num; i++) 
+    for (auto i = 0; i < basic_dml_stmt_num; i++)
         normal_test(d_info, schema, &basic_dml_statement_factory, true, DB_RECORD_FILE);
 
     dut_backup(d_info);
@@ -575,7 +574,7 @@ void gen_stmts_for_one_txn(shared_ptr<schema> &db_schema,
     auto can_error = d_info.can_trigger_error_in_txn;
     if (can_error == false || d_info.ouput_or_affect_num > 0)
         dut_reset_to_backup(d_info);
-    
+
     vector<shared_ptr<prod>> all_tested_stmts; // if crash, report such statement
     scope scope;
     db_schema->fill_scope(scope);
@@ -584,7 +583,7 @@ void gen_stmts_for_one_txn(shared_ptr<schema> &db_schema,
     int fail_time = 0;
     int choice = -1;
     while (1) {
-        if (succeed) 
+        if (succeed)
             choice = d12();
         else { // if fail, do not change choice
             fail_time++;
@@ -606,7 +605,7 @@ void gen_stmts_for_one_txn(shared_ptr<schema> &db_schema,
                 int affect_num = 0;
                 vector<vector<string>> output;
                 all_tested_stmts.push_back(gen);
-                
+
                 dut->test(stmt, &output, &affect_num);
                 if (output.size() + affect_num < d_info.ouput_or_affect_num)
                     continue;
@@ -614,10 +613,10 @@ void gen_stmts_for_one_txn(shared_ptr<schema> &db_schema,
                 string err = e.what();
                 if (err.find("CONNECTION FAIL") != string::npos ||
                         err.find("BUG") != string::npos) {
-                    
+
                     cerr << err << endl;
                     ofstream bug_file(NORMAL_BUG_FILE);
-                    for (auto& stmt : all_tested_stmts) 
+                    for (auto& stmt : all_tested_stmts)
                         bug_file << print_stmt_to_string(stmt) << ";\n" << endl;
                     bug_file.close();
                     throw;
@@ -658,7 +657,7 @@ void kill_server_process_with_SIGTERM()
         ret = kill(server_process_id, 0);
         if (ret != 0)
             break;
-        
+
         auto now_time = get_cur_time_ms();
         if (now_time - begin_time > KILL_PROC_TIME_MS)
             break;
@@ -719,7 +718,7 @@ bool fork_if_server_closed(dbms_info& d_info)
             if (server_restart)
                 sleep(3);
             break; // connect successfully, so break;
-        
+
         } catch (exception &e) { // connect fail
             auto ret = kill(server_process_id, 0);
             if (ret != 0) { // server has die
@@ -735,7 +734,7 @@ bool fork_if_server_closed(dbms_info& d_info)
             auto time_end = get_cur_time_ms();
             if (time_end - time_begin > WAIT_FOR_PROC_TIME_MS) {
                 cerr << "testing server hang, kill it and restart" << endl;
-                
+
                 while (try_to_kill_server() == false) {}
                 server_process_id = fork_db_server(d_info);
                 time_begin = get_cur_time_ms();
diff --git a/log.cc b/log.cc
index bb8f390..409d727 100644
--- a/log.cc
+++ b/log.cc
@@ -57,7 +57,7 @@ struct stats_visitor : prod_visitor {
 void stats_collecting_logger::generated(prod &query)
 {
   queries++;
-  
+
   stats_visitor v;
   query.accept(&v);
 
@@ -145,9 +145,9 @@ pqxx_logger::pqxx_logger(std::string target, std::string conninfo, struct schema
 
   ostringstream seed;
   seed << smith::rng;
-    
-  result r = w.prepared("instance")(GITREV)(target)(hostname)(s.version)(seed.str()).exec();
-  
+
+  result r = w.exec_prepared("instance",GITREV,target,hostname,s.version,seed.str());
+
   id = r[0][0].as<long>(id);
 
   c->prepare("error",
@@ -169,7 +169,7 @@ void pqxx_logger::error(prod &query, const dut::failure &e)
   work w(*c);
   ostringstream s;
   s << query;
-  w.prepared("error")(e.what())(s.str())(e.sqlstate).exec();
+  w.exec_prepared("error",e.what(),s.str(),e.sqlstate);
   w.commit();
 }
 
@@ -180,7 +180,7 @@ void pqxx_logger::generated(prod &query)
     work w(*c);
     ostringstream s;
     impedance::report(s);
-    w.prepared("stat")(queries)(sum_height/queries)(sum_nodes/queries)(sum_retries/queries)(s.str()).exec();
+    w.exec_prepared("stat",queries,sum_height/queries,sum_nodes/queries,sum_retries/queries,s.str());
     w.commit();
   }
 }
diff --git a/postgres.cc b/postgres.cc
index e47cd74..516729f 100644
--- a/postgres.cc
+++ b/postgres.cc
@@ -1,6 +1,7 @@
 #include "postgres.hh"
 #include "config.h"
 #include <iostream>
+#include <fstream>
 #include <iomanip>
 #include <cmath>
 
@@ -42,11 +43,13 @@ static vector<routine> static_aggregate_vec;
 static bool has_aggregate_para = false;
 static map<string, vector<pg_type *>> static_aggregate_para_map;
 
+static vector<string> pgerrmsg;
+
 static bool is_double(string myString, long double& result) {
     istringstream iss(myString);
     iss >> noskipws >> result; // noskipws considers leading whitespace invalid
     // Check the entire string was consumed and if either failbit or badbit is set
-    return iss.eof() && !iss.fail(); 
+    return iss.eof() && !iss.fail();
 }
 
 static string process_number_string(string str)
@@ -142,11 +145,11 @@ static bool is_suitable_proc(string proc_name)
 {
     if (proc_name.find("pg_") != string::npos)
         return false;
-    
+
     if (proc_name == "clock_timestamp"
         || proc_name == "inet_client_port"
         || proc_name == "now"
-        || proc_name.find("random") != string::npos 
+        || proc_name.find("random") != string::npos
         || proc_name == "statement_timestamp"
         || proc_name == "timeofday"
         || (proc_name.find("has_") != string::npos && proc_name.find("_privilege") != string::npos)
@@ -159,7 +162,7 @@ static bool is_suitable_proc(string proc_name)
         // || proc_name == "has_schema_privilege"
         // || proc_name == "current_setting"
         || proc_name == "set_config"
-        || proc_name.find("current") != string::npos 
+        || proc_name.find("current") != string::npos
         || proc_name == "row_security_active"
         || proc_name == "string_agg" // may generate random-ordered string
         || proc_name == "regr_slope" // may give undetermine result when the slope close to infinite or 0
@@ -178,13 +181,22 @@ bool schema_pqxx::is_consistent_with_basic_type(sqltype *rvalue)
         texttype->consistent(rvalue) ||
         datetype->consistent(rvalue))
         return true;
-    
+
     return false;
 }
 
-schema_pqxx::schema_pqxx(string db, unsigned int port, bool no_catalog)
-    : pgsql_connection(db, port)
+schema_pqxx::schema_pqxx(string db, unsigned int port, string path, bool no_catalog)
+    : pgsql_connection(db, port, path)
 {
+    ifstream pgerr("postgresql_err.txt");
+    if (pgerr.is_open()) {
+        std::string line;
+        while (pgerr >> line)
+            pgerrmsg.push_back(line);
+    } else {
+        std::cerr << "Unable to open file for reading." << std::endl;
+    }
+
     // c.set_variable("application_name", "'" PACKAGE "::schema'");
 
     // pqxx::work w(c);
@@ -234,7 +246,7 @@ schema_pqxx::schema_pqxx(string db, unsigned int port, bool no_catalog)
             name2type.count("numeric") > 0 &&
             name2type.count("text") > 0 &&
             name2type.count("timestamp") > 0) {
-        
+
         booltype = name2type["bool"];
         inttype = name2type["int4"];
         realtype = name2type["numeric"];
@@ -264,7 +276,7 @@ schema_pqxx::schema_pqxx(string db, unsigned int port, bool no_catalog)
     supported_join_op.push_back("left outer");
     supported_join_op.push_back("right outer");
     supported_join_op.push_back("full outer");
-    
+
     // Planner Method Configuration
     supported_setting["enable_async_append"] = vector<string>({"on", "off"});
     supported_setting["enable_bitmapscan"] = vector<string>({"on", "off"});
@@ -339,12 +351,12 @@ schema_pqxx::schema_pqxx(string db, unsigned int port, bool no_catalog)
 
         if (no_catalog && ((schema == "pg_catalog") || (schema == "information_schema")))
             continue;
-        
+
         tables.push_back(table(table_name, schema,
                 ((insertable == "YES") ? true : false),
                 ((table_type == "BASE TABLE") ? true : false)));
     }
-    PQclear(res);    
+    PQclear(res);
 
     // cerr << "Loading columns and constraints...";
     for (auto t = tables.begin(); t != tables.end(); ++t) {
@@ -414,15 +426,15 @@ schema_pqxx::schema_pqxx(string db, unsigned int port, bool no_catalog)
     for (auto& o:static_op_vec) {
         register_operator(o);
     }
-    
+
     // cerr << "Loading routines...";
     if (has_routines == false) {
-        string load_routines_sql = 
+        string load_routines_sql =
             "select (select nspname from pg_namespace where oid = pronamespace), oid, prorettype, proname "
             "from pg_proc "
             "where prorettype::regtype::text not in ('event_trigger', 'trigger', 'opaque', 'internal') "
                 "and not (proretset or " + procedure_is_aggregate + " or " + procedure_is_window + ") ;";
-        
+
         res = pqexec_handle_error(conn, load_routines_sql);
         row_num = PQntuples(res);
         for (int i = 0; i < row_num; i++) {
@@ -437,7 +449,7 @@ schema_pqxx::schema_pqxx(string db, unsigned int port, bool no_catalog)
 
             if (!is_suitable_proc(proname))
                 continue;
-            
+
             routine proc(r_name, oid_str, prorettype, proname);
             static_routine_vec.push_back(proc);
         }
@@ -494,7 +506,7 @@ schema_pqxx::schema_pqxx(string db, unsigned int port, bool no_catalog)
 
     // cerr << "Loading aggregates...";
     if (has_aggregates == false) {
-        string load_aggregates_sql = 
+        string load_aggregates_sql =
             "select (select nspname from pg_namespace where oid = pronamespace), oid, prorettype, proname "
             "from pg_proc "
                 "where prorettype::regtype::text not in ('event_trigger', 'trigger', 'opaque', 'internal') "
@@ -539,7 +551,7 @@ schema_pqxx::schema_pqxx(string db, unsigned int port, bool no_catalog)
             q = q + " where oid = " + proc.specific_name + ";";
             res = pqexec_handle_error(conn, q);
             row_num = PQntuples(res);
-            
+
             bool has_not_basic_type = false;
             vector<pg_type *> para_vec;
             for (int i = 0; i < row_num; i++) {
@@ -600,21 +612,27 @@ void dut_libpq_notice_rx(void *arg, const PGresult *res)
     (void) res;
 }
 
-pgsql_connection::pgsql_connection(string db, unsigned int port)
-{    
+pgsql_connection::pgsql_connection(string db, unsigned int port) {
+    test_db = db;
+    test_port = port;
+}
+
+pgsql_connection::pgsql_connection(string db, unsigned int port, string path) : pgsql_connection(db, port)
+{
     test_db = db;
     test_port = port;
-    
+    inst_path = path;
+
     conn = PQsetdbLogin("localhost", to_string(port).c_str(), NULL, NULL, db.c_str(), NULL, NULL);
     if (PQstatus(conn) == CONNECTION_OK)
         return; // succeed
-    
+
     string err = PQerrorMessage(conn);
     if (err.find("does not exist") == string::npos) {
         cerr << "[CONNECTION FAIL]  " << err << " in " << debug_info << endl;
         throw runtime_error("[CONNECTION FAIL] " + err + " in " + debug_info);
     }
-    
+
     cerr << "try to create database testdb" << endl;
     conn = PQsetdbLogin("localhost", to_string(test_port).c_str(), NULL, NULL, "postgres", NULL, NULL);
     if (PQstatus(conn) != CONNECTION_OK) {
@@ -649,8 +667,8 @@ pgsql_connection::~pgsql_connection()
     PQfinish(conn);
 }
 
-dut_libpq::dut_libpq(string db, unsigned int port)
-    : pgsql_connection(db, port)
+dut_libpq::dut_libpq(string db, unsigned int port, string path)
+    : pgsql_connection(db, port, path)
 {
     string set_timeout_cmd = "SET statement_timeout = '" + to_string(POSTGRES_TIMEOUT_SECOND) + "s';";
     test(set_timeout_cmd, NULL, NULL);
@@ -658,84 +676,15 @@ dut_libpq::dut_libpq(string db, unsigned int port)
 
 static bool is_expected_error(string error)
 {
-    if (error.find("violates not-null constraint") != string::npos
-        || error.find("duplicate key value violates unique constraint") != string::npos 
-        || error.find("encoding conversion from UTF8 to ASCII not supported") != string::npos 
-        || error.find("cannot take logarithm of zero") != string::npos 
-        || error.find("invalid regular expression: parentheses") != string::npos
-        || error.find("invalid normalization form") != string::npos
-        || error.find("precision must be between") != string::npos
-        || error.find("invalid regular expression: brackets") != string::npos
-        || error.find("invalid large-object descriptor") != string::npos
-        || error.find("not recognized for type timestamp without time zone") != string::npos
-        || error.find("invalid regular expression") != string::npos
-        || error.find("input is out of range") != string::npos
-        || error.find("field value out of range") != string::npos
-        || error.find("date out of range") != string::npos
-        || error.find("timestamp out of range") != string::npos
-        || error.find("out of range for type") != string::npos
-        || error.find("division by zero") != string::npos
-        || error.find("window functions are not allowed in WHERE") != string::npos
-        || error.find("aggregate functions are not allowed in") != string::npos
-        || error.find("a negative number raised to a non-integer power yields a complex result") != string::npos
-        || error.find("invalid value for parameter") != string::npos
-        || error.find("null character not permitted") != string::npos
-        || error.find("invalid escape string") != string::npos
-        || error.find("subquery uses ungrouped column") != string::npos
-        || error.find("negative substring length not allowed") != string::npos
-        || error.find("aggregate function calls cannot be nested") != string::npos
-        || error.find("cannot take logarithm of a negative number") != string::npos
-        || error.find("zero raised to a negative power is undefined") != string::npos
-        || error.find("character number must be positive") != string::npos
-        || error.find("requested character not valid for encoding") != string::npos
-        || error.find("encoding conversion from") != string::npos
-        || error.find("integer out of range") != string::npos
-        || error.find("unsupported XML feature") != string::npos
-        || error.find("and decimal point together") != string::npos
-        || error.find("field position must not be zero") != string::npos
-        || error.find("lower bound cannot equal upper bound") != string::npos
-        || error.find("cannot take square root of a negative number") != string::npos
-        || error.find("count must be greater than zero") != string::npos
-        || error.find("is not a valid encoding code") != string::npos
-        || error.find("multiple decimal points") != string::npos
-        || error.find("is not a number") != string::npos
-        || error.find("invalid preceding or following size in window function") != string::npos
-        || error.find("FULL JOIN is only supported with merge-joinable or hash-joinable join conditions") != string::npos
-        || error.find("invalid name syntax") != string::npos
-        || error.find("requested length too large") != string::npos
-        || error.find("canceling statement due to statement timeout") != string::npos
-        || error.find("cannot use \"") != string::npos
-        || error.find("lower and upper bounds must be finite") != string::npos
-        || error.find("value out of range") != string::npos
-        || error.find("LIKE pattern must not end with escape character") != string::npos
-        || error.find("value overflows numeric format") != string::npos
-        || error.find("index row size") != string::npos
-        || error.find("stack depth limit exceeded") != string::npos
-        || error.find("requested character too large for encoding") != string::npos
-        || error.find("invalid Unicode escape") != string::npos
-        || error.find("does not support") != string::npos
-        // || error.find("operator does not exist") != string::npos
-        || error.find("value is too big in tsquery") != string::npos
-        || (error.find("index row requires") != string::npos && error.find("bytes, maximum size") != string::npos)
-        || error.find("invalid memory alloc request size") != string::npos
-        || error.find(" must be ahead of ") != string::npos
-        || error.find("unterminated format() type specifier") != string::npos
-        || error.find("operand, lower bound, and upper bound cannot be NaN") != string::npos
-        || error.find("Unicode normalization can only be performed if server encoding is UTF8") != string::npos
-        || error.find("Cannot enlarge string buffer containing") != string::npos
-        || error.find("nvalid input syntax for type numeric: ") != string::npos
-        || error.find("numeric field overflow") != string::npos
-        || error.find("could not create unique index") != string::npos
-        || error.find("Unicode categorization can only be performed if server encoding is UTF8") != string::npos
-        || error.find("invalid type name") != string::npos
-        )
-        return true;
+    for (const auto& err : pgerrmsg)
+        if (error.find(err))
+            return true;
 
     return false;
 }
 
-void dut_libpq::test(const string &stmt, 
-                    vector<vector<string>>* output, 
+void dut_libpq::test(const string &stmt,
+                    vector<vector<string>>* output,
                     int* affected_row_num,
                     vector<string>* env_setting_stmts)
 {
@@ -756,13 +705,13 @@ void dut_libpq::test(const string &stmt,
             }
         }
     }
-    
+
     auto res = PQexec(conn, stmt.c_str());
     auto status = PQresultStatus(res);
     if (status != PGRES_COMMAND_OK && status != PGRES_TUPLES_OK) {
         string err = PQerrorMessage(conn);
         PQclear(res);
-        
+
         // clear the current result
         while (res != NULL) {
             res = PQgetResult(conn);
@@ -777,7 +726,7 @@ void dut_libpq::test(const string &stmt,
 
     if (affected_row_num) {
         auto char_num = PQcmdTuples(res);
-        if (char_num != NULL) 
+        if (char_num != NULL)
             *affected_row_num = atoi(char_num);
         else
             *affected_row_num = 0;
@@ -804,12 +753,12 @@ void dut_libpq::test(const string &stmt,
     }
     PQclear(res);
 
-    return;    
+    return;
 }
 
 void dut_libpq::reset(void)
 {
-    if (conn) 
+    if (conn)
         PQfinish(conn);
     conn = PQsetdbLogin("localhost", to_string(test_port).c_str(), NULL, NULL, "postgres", NULL, NULL);
     if (PQstatus(conn) != CONNECTION_OK) {
@@ -849,12 +798,13 @@ void dut_libpq::reset(void)
 
 void dut_libpq::backup(void)
 {
-     string pgsql_dump = "/usr/local/pgsql/bin/pg_dump -p " + 
+     string pgsql_dump = inst_path + "/bin/pg_dump -p " +
                         to_string(test_port) + " " + test_db + " > " + POSTGRES_BK_FILE(test_db);
+
     int ret = system(pgsql_dump.c_str());
     if (ret != 0) {
         std::cerr << "backup fail \nLocation: " + debug_info << endl;
-        throw std::runtime_error("backup fail \nLocation: " + debug_info); 
+        throw std::runtime_error("backup fail \nLocation: " + debug_info);
     }
 }
 
@@ -862,15 +812,15 @@ void dut_libpq::reset_to_backup(void)
 {
     reset();
     string bk_file = POSTGRES_BK_FILE(test_db);
-    if (access(bk_file.c_str(), F_OK ) == -1) 
+    if (access(bk_file.c_str(), F_OK ) == -1)
         return;
-    
+
     PQfinish(conn);
-    
-    string pgsql_source = "/usr/local/pgsql/bin/psql -p " 
-                        + to_string(test_port) + " " + test_db + " < " 
+
+    string pgsql_source = inst_path + "/bin/psql -p "
+                        + to_string(test_port) + " " + test_db + " < "
                         + POSTGRES_BK_FILE(test_db) + " 1> /dev/null";
-    if (system(pgsql_source.c_str()) == -1) 
+    if (system(pgsql_source.c_str()) == -1)
         throw std::runtime_error(string("system() error, return -1") + "\nLocation: " + debug_info);
 
     conn = PQsetdbLogin("localhost", to_string(test_port).c_str(), NULL, NULL, test_db.c_str(), NULL, NULL);
diff --git a/postgres.hh b/postgres.hh
index 71b46bc..01ac69c 100644
--- a/postgres.hh
+++ b/postgres.hh
@@ -46,7 +46,9 @@ struct pgsql_connection {
     PGconn *conn = 0;
     string test_db;
     unsigned int test_port;
+    string inst_path;
     pgsql_connection(string db, unsigned int port);
+    pgsql_connection(string db, unsigned int port, string path);
     ~pgsql_connection();
 };
 
@@ -59,7 +61,7 @@ struct schema_pqxx : schema, pgsql_connection {
     }
     bool is_consistent_with_basic_type(sqltype *rvalue);
     // schema_pqxx(string &conninfo, bool no_catalog);
-    schema_pqxx(string db, unsigned int port, bool no_catalog);
+    schema_pqxx(string db, unsigned int port, string path, bool no_catalog);
     ~schema_pqxx();
 };
 
@@ -70,19 +72,19 @@ struct schema_pqxx : schema, pgsql_connection {
 // };
 
 struct dut_libpq : dut_base, pgsql_connection {
-    virtual void test(const string &stmt, 
-                    vector<vector<string>>* output = NULL, 
+    virtual void test(const string &stmt,
+                    vector<vector<string>>* output = NULL,
                     int* affected_row_num = NULL,
                     vector<string>* env_setting_stmts = NULL);
     virtual void reset(void);
 
     virtual void backup(void);
-    virtual void reset_to_backup(void);    
+    virtual void reset_to_backup(void);
 
     virtual void get_content(vector<string>& tables_name, map<string, vector<vector<string>>>& content);
 
     static int save_backup_file(string db_name, string path);
-    dut_libpq(string db, unsigned int port);
+    dut_libpq(string db, unsigned int port, string path);
 };
 
 #endif
diff --git a/qcn.cc b/qcn.cc
index c735615..994dc0b 100644
--- a/qcn.cc
+++ b/qcn.cc
@@ -55,8 +55,8 @@ void print_output_to_file(multiset<vector<string>> &output, string filename)
     ofile.close();
 }
 
-void minimize_qcn_database(shared_ptr<qcn_tester> qcn, 
-                            string input_db_record_file, 
+void minimize_qcn_database(shared_ptr<qcn_tester> qcn,
+                            string input_db_record_file,
                             string output_db_record_file,
                             multiset<vector<string>>* min_origin_output,
                             multiset<vector<string>>* min_qit_output)
@@ -76,7 +76,7 @@ void minimize_qcn_database(shared_ptr<qcn_tester> qcn,
         auto new_off = stmts.find(seperate_label, old_off);
         if (new_off == string::npos)
             break;
-        
+
         auto each_sql = stmts.substr(old_off, new_off - old_off); // not include the seperate_label
         old_off = new_off + seperate_label.size();
 
@@ -89,7 +89,7 @@ void minimize_qcn_database(shared_ptr<qcn_tester> qcn,
         stmt_queue.erase(stmt_queue.begin() + i);
         cout << "-----------------" << endl;
         cout << "trying to remove stmt: " << removed_stmt << endl;
-        
+
         shared_ptr<dut_base> dut;
         while (1) {
             try {
@@ -103,7 +103,7 @@ void minimize_qcn_database(shared_ptr<qcn_tester> qcn,
                 continue;
             }
         }
-        
+
         // feed the database with stmts
         int new_stmt_num = stmt_queue.size();
         bool trigger_error = false;
@@ -152,7 +152,7 @@ void minimize_qcn_database(shared_ptr<qcn_tester> qcn,
             cout << "-----------------" << endl;
             continue;
         }
-        
+
         // bug disapper, add the stmt back
         stmt_queue.insert(stmt_queue.begin() + i, removed_stmt);
     }
@@ -173,7 +173,7 @@ int cpu_affinity = -1;
 
 int main(int argc, char *argv[]) {
     test_start_timestamp_ms = get_cur_time_ms();
-    
+
     // pipefd for process communication
     int pipefd[2];
     if (pipe(pipefd) == -1) {
@@ -187,14 +187,14 @@ int main(int argc, char *argv[]) {
 (help|db-test-num|seed|cpu-affinity|\
 ignore-crash|\
 sqlite|\
-postgres-db|postgres-port|\
+postgres-db|postgres-port|postgres-path|\
 cockroach-db|cockroach-port|cockroach-host|\
 yugabyte-db|yugabyte-port|yugabyte-host|\
 clickhouse-db|clickhouse-port|\
 tidb-db|tidb-port|\
 mysql-db|mysql-port|\
 oceanbase-db|oceanbase-port|oceanbase-host)(?:=((?:.|\n)*))?");
-    
+
     for(char **opt = argv + 1 ;opt < argv + argc; opt++) {
         smatch match;
         string s(*opt);
@@ -210,19 +210,20 @@ oceanbase-db|oceanbase-port|oceanbase-host)(?:=((?:.|\n)*))?");
         cerr <<
         "    --postgres-db=connstr  Postgres database to send queries to, should used with --postgres-port" <<endl <<
         "    --postgres-port=int    Postgres server port number, should used with --postgres-db" <<endl <<
+        "    --postgres-path=str    Postgres server instalation path (default is '/usr/local/pgsql')" <<endl <<
 #ifdef HAVE_LIBSQLITE3
         "    --sqlite=URI           SQLite database to send queries to" << endl <<
 #endif
 #ifdef HAVE_LIBMYSQLCLIENT
-        "    --mysql-db=constr      MySQL database to send queries to, should be used with mysql-port" << endl << 
-        "    --mysql-port=int       MySQL server port number, should be used with mysql-db" << endl << 
-        "    --tidb-db=constr   tidb database name to send queries to (should used with" << endl << 
-        "    --tidb-port=int    tidb server port number" << endl << 
-        "    --oceanbase-db=constr      OceanBase database name to send queries to " << endl << 
-        "    --oceanbase-port=int       OceanBase server port number" << endl << 
+        "    --mysql-db=constr      MySQL database to send queries to, should be used with mysql-port" << endl <<
+        "    --mysql-port=int       MySQL server port number, should be used with mysql-db" << endl <<
+        "    --tidb-db=constr   tidb database name to send queries to (should used with" << endl <<
+        "    --tidb-port=int    tidb server port number" << endl <<
+        "    --oceanbase-db=constr      OceanBase database name to send queries to " << endl <<
+        "    --oceanbase-port=int       OceanBase server port number" << endl <<
         "    --oceanbase-host=constr    OceanBase server host address" << endl <<
 #endif
-        "    --clickhouse-db=constr    ClickHouse tested database" << endl << 
+        "    --clickhouse-db=constr    ClickHouse tested database" << endl <<
         "    --clickhouse-port=int     ClickHouse server port number" << endl <<
         "    --cockroach-db=constr       CockroachDB tested database" << endl <<
         "    --cockroach-port=int        CockroachDB server port number" << endl <<
@@ -232,15 +233,16 @@ oceanbase-db|oceanbase-port|oceanbase-host)(?:=((?:.|\n)*))?");
         "    --yugabyte-host=constr     YugaByte server host address" << endl <<
         "    --db-test-num=int      number of qcn tests for each generated database" << endl <<
         "    --seed=int             seed RNG with specified int instead of PID" << endl <<
-        "    --cpu-affinity=int     set cpu affinity of qcn and its child process to specific CPU" << endl << 
-        "    --ignore-crash         ignore crash bug, the fuzzer will not stop when it finds crash issues" << endl << 
+        "    --cpu-affinity=int     set cpu affinity of qcn and its child process to specific CPU" << endl <<
+        "    --ignore-crash         ignore crash bug, the fuzzer will not stop when it finds crash issues" << endl <<
         "    --help                 print available command line options and exit" << endl;
         return 0;
     }
-    
+
     dbms_info d_info(options);
     cerr << "-------------Test Info------------" << endl;
     cerr << "Test DBMS: " << d_info.dbms_name << endl;
+    cerr << "Test DBMS path: " << d_info.inst_path << endl;
     cerr << "Test database: " << d_info.test_db << endl;
     cerr << "Test port: " << d_info.test_port << endl;
     cerr << "Test host: " << d_info.host_addr << endl;
@@ -249,11 +251,11 @@ oceanbase-db|oceanbase-port|oceanbase-host)(?:=((?:.|\n)*))?");
     int db_test_time = DEFAULT_DB_TEST_TIME;
     if (options.count("db-test-num") > 0)
         db_test_time = stoi(options["db-test-num"]);
-    
+
     cpu_affinity = -1;
     if (options.count("cpu-affinity") > 0)
         cpu_affinity = stoi(options["cpu-affinity"]);
-    
+
     if (cpu_affinity >= 0) {
         cpu_set_t cpuset;
         CPU_ZERO(&cpuset); // clear the CPU set
@@ -264,7 +266,7 @@ oceanbase-db|oceanbase-port|oceanbase-host)(?:=((?:.|\n)*))?");
             exit(EXIT_FAILURE);
         }
     }
-    
+
     int round = 0;
     while (1) {
         cerr << "round " << round << " ... " << endl;
@@ -359,8 +361,8 @@ oceanbase-db|oceanbase-port|oceanbase-host)(?:=((?:.|\n)*))?");
                     // reduce database
                     multiset<vector<string>> min_origin_result = qcn->original_query_result;
                     multiset<vector<string>> min_qit_result = qcn->qit_query_result;
-                    minimize_qcn_database(qcn, DB_RECORD_FILE, 
-                                            "minimized/" + string(DB_RECORD_FILE), 
+                    minimize_qcn_database(qcn, DB_RECORD_FILE,
+                                            "minimized/" + string(DB_RECORD_FILE),
                                             &min_origin_result,
                                             &min_qit_result);
                     print_output_to_file(min_origin_result, "minimized/origin.out");
@@ -428,6 +430,6 @@ oceanbase-db|oceanbase-port|oceanbase-host)(?:=((?:.|\n)*))?");
         print_test_time_info();
         cerr << "done" << endl;
     }
-    
+
     return 0;
 }
